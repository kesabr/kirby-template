/* GRID */
$grid-columns: 24; // must be dividable with 4 and 6 (12, 24, 36)
$column-width: 1fr;
$grid-gutter: clamp(var(--margin-xs), var(--margin-xs) + 0.2vw, var(--margin-sm));

@mixin grid-container {
    display: grid;
    grid-template-columns: repeat($grid-columns, $column-width);
    gap: $grid-gutter;
    margin-block: $grid-gutter;
    // padding-inline: $grid-gutter;
}

@mixin grid-item($columns: 1) {
    grid-column: span $columns;
}

/* Grid Container */
.grid-container {
    @include grid-container;

    /* All children have * full column width * by default */
    &>* {
        @include grid-item(calc($grid-columns))
    }
}

/* All items have * full column width * by default */
.grid-item-100,
.grid-item-75,
.grid-item-66,
.grid-item-50,
.grid-item-33,
.grid-item-25,
.grid-item-16,
.grid-item-12,
.grid-item-100-md,
.grid-item-75-md,
.grid-item-66-md,
.grid-item-50-md,
.grid-item-33-md,
.grid-item-25-md,
.grid-item-16-md,
.grid-item-12-md,
.grid-item-100-sm,
.grid-item-75-sm,
.grid-item-66-sm,
.grid-item-50-sm,
.grid-item-33-sm,
.grid-item-25-sm,
.grid-item-16-sm,
.grid-item-12-sm {
    @include grid-item($grid-columns);
}

/* These grid items stay in * 2 columns * down to small devices */
@media (min-width: $breakpoint-sm) {

    /* Small */
    .grid-item-75-sm {
        @include grid-item(calc($grid-columns * (3 / 4)));
    }

    .grid-item-66-sm {
        @include grid-item(calc($grid-columns * (2 / 3)));
    }

    .grid-item-50-sm {
        @include grid-item(calc($grid-columns * (1 / 2)));
    }

    .grid-item-33-sm {
        @include grid-item(calc($grid-columns * (1 / 3)));
    }

    .grid-item-25-sm {
        @include grid-item(calc($grid-columns * (1 / 4)));
    }

    .grid-item-16-sm {
        @include grid-item(calc($grid-columns * (1 / 4)));
    }

    .grid-item-12-sm {
        @include grid-item(calc($grid-columns * (1 / 8)));
    }


    /* Medium */
    .grid-item-75-md {
        @include grid-item($grid-columns);
    }

    .grid-item-66-md,
    .grid-item-50-md,
    .grid-item-33-md,
    .grid-item-25-md {
        @include grid-item(calc($grid-columns * (1 / 2)));
    }

    .grid-item-16-md,
    .grid-item-12-md {
        @include grid-item(calc($grid-columns * (1 / 4)));
    }


}

/* These grid items stay in * 2 columns * down to medium devices */
@media (min-width: $breakpoint-md) {

    /* Medium */
    .grid-item-75-md {
        @include grid-item(calc($grid-columns * (3 / 4)));
    }

    .grid-item-66-md {
        @include grid-item(calc($grid-columns * (2 / 3)));
    }

    .grid-item-50-md {
        @include grid-item(calc($grid-columns * (1 / 2)));
    }

    .grid-item-33-md {
        @include grid-item(calc($grid-columns * (1 / 3)));
    }

    .grid-item-25-md {
        @include grid-item(calc($grid-columns * (1 / 4)));
    }

    .grid-item-16-md {
        @include grid-item(calc($grid-columns * (1 / 4)));
    }

    .grid-item-12-md {
        @include grid-item(calc($grid-columns * (1 / 8)));
    }

    /* Standart */
    .grid-item-75 {
        @include grid-item($grid-columns);
    }

    .grid-item-66,
    .grid-item-50,
    .grid-item-33,
    .grid-item-25 {
        @include grid-item(calc($grid-columns * (1 / 2)));
    }

    .grid-item-16,
    .grid-item-12 {
        @include grid-item(calc($grid-columns * (1 / 4)));
    }
}

/* All grid items reach full variety on large devices */
@media (min-width: $breakpoint-lg) {

    /* Standart */
    .grid-item-75 {
        @include grid-item(calc($grid-columns * (3 / 4)));
    }

    .grid-item-66 {
        @include grid-item(calc($grid-columns * (2 / 3)));
    }

    .grid-item-50 {
        @include grid-item(calc($grid-columns * (1 / 2)));
    }

    .grid-item-33 {
        @include grid-item(calc($grid-columns * (1 / 3)));
    }

    .grid-item-25 {
        @include grid-item(calc($grid-columns * (1 / 4)));
    }

    .grid-item-16 {
        @include grid-item(calc($grid-columns * (1 / 4)));
    }

    .grid-item-12 {
        @include grid-item(calc($grid-columns * (1 / 8)));
    }
}

/* Gap setting utility classes */
.no-gap {
    gap: 0;
}

.no-rowgap {
    row-gap: 0;
}

.no-columngap {
    column-gap: 0;
}